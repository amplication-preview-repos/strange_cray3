/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ScrapedData as PrismaScrapedData,
  Keyword as PrismaKeyword,
} from "@prisma/client";

export class ScrapedDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScrapedDataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scrapedData.count(args);
  }

  async scrapedDataItems<T extends Prisma.ScrapedDataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapedDataFindManyArgs>
  ): Promise<PrismaScrapedData[]> {
    return this.prisma.scrapedData.findMany<Prisma.ScrapedDataFindManyArgs>(
      args
    );
  }
  async scrapedData<T extends Prisma.ScrapedDataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapedDataFindUniqueArgs>
  ): Promise<PrismaScrapedData | null> {
    return this.prisma.scrapedData.findUnique(args);
  }
  async createScrapedData<T extends Prisma.ScrapedDataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapedDataCreateArgs>
  ): Promise<PrismaScrapedData> {
    return this.prisma.scrapedData.create<T>(args);
  }
  async updateScrapedData<T extends Prisma.ScrapedDataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapedDataUpdateArgs>
  ): Promise<PrismaScrapedData> {
    return this.prisma.scrapedData.update<T>(args);
  }
  async deleteScrapedData<T extends Prisma.ScrapedDataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScrapedDataDeleteArgs>
  ): Promise<PrismaScrapedData> {
    return this.prisma.scrapedData.delete(args);
  }

  async getKeyword(parentId: string): Promise<PrismaKeyword | null> {
    return this.prisma.scrapedData
      .findUnique({
        where: { id: parentId },
      })
      .keyword();
  }
}
